# -*- coding: utf-8 -*-
"""matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/mohammadreza3979/graph_ml/blob/main/assignments/matplotlib.ipynb

# <font color='brown'>Draw 2D and 3D Graphics with Matplotlib</font>

## Introduction

![logo2.png](attachment:logo2.png)

In the process of solving problems by using machine learning methods, you will definitely encounter scenarios that require drawing data. **Matplotlib** is an open source drawing library that supports **Python** language. As it supports rich drawing types, simple drawing methods and complete interface documentation, it is popular among Python engineers, researchers and data engineers.  What's more, **Matplotlib** has a very active community and stable version iterations. When we are learning machine learning courses, mastering the use of **Matplotlib** is undoubtedly one of the most important preparations. So, in this lab, we will learn how to use **Matplotlib** to draw 2D and 3D graphics.

### Knowledge Points

The main points covered in this experiment are:
- The API compatible with MATLAB code style 
- Diagram name, axis name and legend
- Line style, color and transparency
- Canvas grid and axis range
- Other 2D graphics
- 3D graphics

### Environment

- Python 3.6
- Matplotlib: 2.2.2

### Index 

- <a href="#1">1. The API Compatible with MATLAB Code Style</a>
- <a href="#2">2. Matplotlib Object-Oriented API (Recommended)</a>
- <a href="#3">3. Summary</a>

---

When drawing in the **Notebook** environment, you need to run the `%matplotlib inline` command first. The purpose of this command is to embed the graphics drawn by `matplotlib` in the current page:
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
# Practice in the blank cell. Do it yourself. Don't just copy and paste the code!
# %matplotlib inline

"""## <a id = "1">1. The API Compatible with MATLAB Code Style </a>

I believe that many students in science and engineering have used **MATLAB**, a high-level technical computing language and interactive environment for algorithm development, data visualization, data analysis and numerical computing. In **Matplotlib**, an API similar to MATLAB is also provided. For students who have used MATLAB, this will be the fastest way to get started with Matplotlib:
"""

""" To use the compatible MATLAB API provided by matplotlib, you need to import the pylab module
"""
from matplotlib import pylab

from matplotlib import pylab

"""Use NumPy to generate random data
"""
import numpy as np

x = np.linspace(0, 10, 20)
y = x * x + 2

import numpy as np

x = np.linspace(0, 10, 20)
y = x * x + 2

"""It only takes 1 command to draw
"""
pylab.plot(x, y, 'r') # 'r' stands for red

pylab.plot(x, y, 'r') # 'r' stands for red

"""If we want to draw a subgraph, we can use the `subplot` method:"""

"""Drawing a subgraph
"""
pylab.subplot(1,2,1) # The contents of the brackets represent (rows, columns, indexes)
pylab.plot(x, y, 'r--') # The third parameter here determines color and line style

pylab.subplot(1,2,2)
pylab.plot(y, x, 'g*-')

pylab.subplot(1,2,1) 
pylab.plot(x, y, 'r--')

pylab.subplot(1,2,2)
pylab.plot(y, x, 'g*-')

"""The advantage of using a MATLAB-compatible API is that, if you are familiar with MATLAB, you will quickly get started with drawing using Python. However, in addition to some simple graphics, MATLAB-compatible APIs are **NOT** recommended.

It is recommended to learn and use the object-oriented API provided by Matplotlib, which is more powerful and easier to use.

## <a id = "1">2. Matplotlib Object-Oriented API (Recommended)</a>
"""

"""To use the object-oriented API provided by matplotlib, you need to import the pyplot module, and the convention is abbreviated as plt
"""
from matplotlib import pyplot as plt

from matplotlib import pyplot as plt

"""Method 1: Draw the same graphic as above
"""
fig = plt.figure() # New graphic object

axes = fig.add_axes([0.5, 0.1, 0.8, 0.8]) # Control the left, right, width, height of the canvas (from 0 to 1)

axes.plot(x, y, 'r')

fig = plt.figure() 

axes = fig.add_axes([0.5, 0.1, 0.8, 0.8])

axes.plot(x, y, 'r')

"""<font color='brown'>**Key：**</font>
In the code above, you may have questions about `figure` and `axes`. Matplotlib's API design fits well with the common sense, where `figure` is equivalent to a drawing board for painting and `axes` is equivalent to a canvas laid on the drawing board. We draw the image on the canvas, so we have operations like  `plot`, `set_xlabel` and so on:

<img width="300px" src="attachment:1957c95cde22910-2.jpg"></img>
"""

"""Again, we can draw subgraphs
"""
fig, axes = plt.subplots(nrows=1, ncols=2) # Submap is of 1 row, 2 columns

for ax in axes:
    ax.plot(x, y, 'r')

fig, axes = plt.subplots(nrows=1, ncols=2) 

for ax in axes:
    ax.plot(x, y, 'r')

"""We can also draw a picture inside another picture
"""
fig = plt.figure() # New drawing board

axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # Big canvas
axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # Small canvas

# Big drawing board
axes1.plot(x, y, 'r')

# Small drawing board
axes2.plot(y, x, 'g')

fig = plt.figure() 

axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8])
axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3])


axes1.plot(x, y, 'r')

axes2.plot(y, x, 'g')

"""<font color='brown'>**Tips：**</font>
In the code above, you have learned to add the canvas `axes` to the drawing board `figure` we set, by using the `add_axes()` method. In Matplotlib, there is also a way to add a canvas: `plt.subplots()`. **This and the `axes` are all equivalent to canvas:**
"""

"""Method 2: Add a canvas by using plt.subplots()
"""
fig, axes = plt.subplots()

axes.plot(x, y, 'r')

fig, axes = plt.subplots()

axes.plot(x, y, 'r')

"""Matplotlib drawing is very flexible, we can also add a canvas with `add_subplot` and complete the drawing with `plt`."""

"""Method 3: Add a canvas by using add_subplot()
"""
fig = plt.figure() # New graphic object

fig.add_subplot()

plt.plot(x, y, 'r')

fig = plt.figure() 
fig.add_subplot()

plt.plot(x, y, 'r')

"""For the three methods of adding canvas mentioned above, you may they are a little messy. In general, you only need to be familiar with one of them, and it is recommended to use `plt.subplots()`, as many of the following examples will be expanded using it.

In addition, since we have a drawing board and a canvas, should we also be able to adjust the size and shape of the two? Of course!
"""

""" Adjusts canvas size and display accuracy
"""
fig, axes = plt.subplots(figsize=(16,9), dpi=50) # Adjust the size with figsize and adjust the display accuracy with dpi

fig, axes = plt.subplots(figsize=(16,9), dpi=50)

"""### 2.1 Graph Name, Axis name and Legend"""

"""Set the picture title
"""
ax.set_title("title")

ax.set_title("title")

"""Set the axis names
"""
ax.set_xlabel("x")
ax.set_ylabel("y")

ax.set_xlabel("x")
ax.set_ylabel("y")

"""Set the legend
"""
ax.legend(["label1", "label2"])

ax.legend(["label1", "label2"])

"""Examples are as follows:"""

"""Draw a graph containing the titles of the diagram, the title of the axes, and the legend
"""
fig, axes = plt.subplots()

axes.set_xlabel('x label')
axes.set_ylabel('y label')
axes.set_title('title')

axes.plot(x, x**2)
axes.plot(x, x**3)
axes.legend(["y = x**2", "y = x**3"], loc=2)

fig, axes = plt.subplots()

axes.set_xlabel('x label')
axes.set_ylabel('y label')
axes.set_title('title')

axes.plot(x, x**2)
axes.plot(x, x**3)
axes.legend(["y = x**2", "y = x**3"], loc=2)

"""The `loc` parameter in the legend marks the position of the legend; `1`, `2`, `3` and `4` represent: _upper right corner_, _upper left corner_, _lower left corner_ and _lower right corner_; and `0` represents _adaptive_.

### 2.2 Line Type, Color and Transparency

In `Matplotlib`, you can set other properties such as line color, transparency, and more.
"""

"""Set the color and transparency of the line
"""
fig, axes = plt.subplots()

axes.plot(x, x+1, color="red", alpha=0.5)
axes.plot(x, x+2, color="#1155dd")
axes.plot(x, x+3, color="#15cc55")

fig, axes = plt.subplots()

axes.plot(x, x+1, color="red", alpha=0.5)
axes.plot(x, x+2, color="#1155dd")
axes.plot(x, x+3, color="#15cc55")

"""For the **line type**, in addition to _solid line_ and _dotted line_, there are many rich line types to choose from:"""

"""Set line type
"""
fig, ax = plt.subplots(figsize=(12,6))

# Line width
ax.plot(x, x+1, color="blue", linewidth=0.25)
ax.plot(x, x+2, color="blue", linewidth=0.50)
ax.plot(x, x+3, color="blue", linewidth=1.00)
ax.plot(x, x+4, color="blue", linewidth=2.00)

# Dotted line  
ax.plot(x, x+5, color="red", lw=2, linestyle='-')
ax.plot(x, x+6, color="red", lw=2, ls='-.')
ax.plot(x, x+7, color="red", lw=2, ls=':')

# Dotted line's interlaced width
line, = ax.plot(x, x+8, color="black", lw=1.50)
line.set_dashes([5, 10, 15, 10])

# Markers
ax.plot(x, x+ 9, color="green", lw=2, ls='--', marker='+')
ax.plot(x, x+10, color="green", lw=2, ls='--', marker='o')
ax.plot(x, x+11, color="green", lw=2, ls='--', marker='s')
ax.plot(x, x+12, color="green", lw=2, ls='--', marker='1')

# Markers sizes and colors
ax.plot(x, x+13, color="purple", lw=1, ls='-', marker='o', markersize=2)
ax.plot(x, x+14, color="purple", lw=1, ls='-', marker='o', markersize=4)
ax.plot(x, x+15, color="purple", lw=1, ls='-', marker='o', markersize=8, markerfacecolor="red")
ax.plot(x, x+16, color="purple", lw=1, ls='-', marker='s', markersize=8, 
        markerfacecolor="yellow", markeredgewidth=2, markeredgecolor="blue")

fig, ax = plt.subplots(figsize=(12,6))


ax.plot(x, x+1, color="blue", linewidth=0.25)
ax.plot(x, x+2, color="blue", linewidth=0.50)
ax.plot(x, x+3, color="blue", linewidth=1.00)
ax.plot(x, x+4, color="blue", linewidth=2.00)

  
ax.plot(x, x+5, color="red", lw=2, linestyle='-')
ax.plot(x, x+6, color="red", lw=2, ls='-.')
ax.plot(x, x+7, color="red", lw=2, ls=':')


line, = ax.plot(x, x+8, color="black", lw=1.50)
line.set_dashes([5, 10, 15, 10])


ax.plot(x, x+ 9, color="green", lw=2, ls='--', marker='+')
ax.plot(x, x+10, color="green", lw=2, ls='--', marker='o')
ax.plot(x, x+11, color="green", lw=2, ls='--', marker='s')
ax.plot(x, x+12, color="green", lw=2, ls='--', marker='1')


ax.plot(x, x+13, color="purple", lw=1, ls='-', marker='o', markersize=2)
ax.plot(x, x+14, color="purple", lw=1, ls='-', marker='o', markersize=4)
ax.plot(x, x+15, color="purple", lw=1, ls='-', marker='o', markersize=8, markerfacecolor="red")
ax.plot(x, x+16, color="purple", lw=1, ls='-', marker='s', markersize=8, 
        markerfacecolor="yellow", markeredgewidth=2, markeredgecolor="blue")

"""### 2.3 Canvas Grid and Axis Range

Sometimes we may need to display the canvas grid or adjust the axis range:
"""

""" Set the canvas grid and axis range
"""
fig, axes = plt.subplots(1, 2, figsize=(10,5))

# Display the grid
Axes[0].plot(x, x**2, x, x**3, lw=2)
Axes[0].grid(True)

# Set the axis range
Axes[1].plot(x, x**2, x, x**3)
Axes[1].set_ylim([0, 60])
Axes[1].set_xlim([2, 5])

fig, axes = plt.subplots(1, 2, figsize=(10,5))


Axes[0].plot(x, x**2, x, x**3, lw=2)
Axes[0].grid(True)

Axes[1].plot(x, x**2, x, x**3)
Axes[1].set_ylim([0, 60])
Axes[1].set_xlim([2, 5])

"""### 2.4 Other 2D Graphics

In addition to _line graphs_, Matplotlib also supports drawing common plots such as _scatter plots_, _histograms_ and more:
"""

"""Draw scatter plot, step plot, bar chart and area chart
"""
n = np.array([0,1,2,3,4,5])

fig, axes = plt.subplots(1, 4, figsize=(16,5))

axes[0].scatter(x, x + 0.25*np.random.randn(len(x)))
axes[0].set_title("scatter")

axes[1].step(n, n**2, lw=2)
axes[1].set_title("step")

axes[2].bar(n, n**2, align="center", width=0.5, alpha=0.5)
axes[2].set_title("bar")

axes[3].fill_between(x, x**2, x**3, color="green", alpha=0.5)
axes[3].set_title("fill_between")

n = np.array([0,1,2,3,4,5])

fig, axes = plt.subplots(1, 4, figsize=(16,5))

axes[0].scatter(x, x + 0.25*np.random.randn(len(x)))
axes[0].set_title("scatter")

axes[1].step(n, n**2, lw=2)
axes[1].set_title("step")

axes[2].bar(n, n**2, align="center", width=0.5, alpha=0.5)
axes[2].set_title("bar")

axes[3].fill_between(x, x**2, x**3, color="green", alpha=0.5)
axes[3].set_title("fill_between")

"""Draw a radar chart
"""
fig = plt.figure(figsize=(6,6))
ax = fig.add_axes([0.0, 0.0, .6, .6], polar=True)
t = np.linspace(0, 2 * np.pi, 100)
ax.plot(t, t, color='blue', lw=3)

fig = plt.figure(figsize=(6,6))
ax = fig.add_axes([0.0, 0.0, .6, .6], polar=True)
t = np.linspace(0, 2 * np.pi, 100)
ax.plot(t, t, color='blue', lw=3)

"""Draw a histogram
"""
n = np.random.randn(100000)
fig, axes = plt.subplots(1, 2, figsize=(12,4))

axes[0].hist(n)
axes[0].set_title("Default histogram")
axes[0].set_xlim((min(n), max(n)))

axes[1].hist(n, cumulative=True, bins=50)
axes[1].set_title("Cumulative detailed histogram")
axes[1].set_xlim((min(n), max(n)))

n = np.random.randn(100000)
fig, axes = plt.subplots(1, 2, figsize=(12,4))

axes[0].hist(n)
axes[0].set_title("Default histogram")
axes[0].set_xlim((min(n), max(n)))

axes[1].hist(n, cumulative=True, bins=50)
axes[1].set_title("Cumulative detailed histogram")
axes[1].set_xlim((min(n), max(n)))

# Generate sample data
alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def flux_qubit_potential(phi_m, phi_p):
    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)

phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = flux_qubit_potential(X, Y).T

alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def flux_qubit_potential(phi_m, phi_p):
    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)

phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = flux_qubit_potential(X, Y).T

"""Draw contour image
"""
fig, ax = plt.subplots()

cnt = ax.contour(Z, cmap=plt.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])

fig, ax = plt.subplots()

cnt = ax.contour(Z, cmap=plt.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])

"""### 2.5 3D Graphics

In the process of drawing 3D graphics with Matplotlib, first we need to import the `Axes3D` class and specify the 3D graphic to draw with the `projection='3d'` parameter. Since the drawing of 3D graphics is not often encountered in machine learning, there will be no more introduction here:
"""

"""Draw 3D surface image
"""
from mpl_toolkits.mplot3d.axes3d import Axes3D

fig = plt.figure(figsize=(14,6))

# Specify the 3D graphics to draw, with projection='3d'
ax = fig.add_subplot(1, 2, 1, projection='3d')
ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

from mpl_toolkits.mplot3d.axes3d import Axes3D

fig = plt.figure(figsize=(14,6))

# Specify the 3D graphics to draw, with projection='3d'
ax = fig.add_subplot(1, 2, 1, projection='3d')
ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

"""<font color='brown'>**Tips：**</font>
When we draw 3D graphics in the desktop environment, we can drag the angles arbitrarily by the mouse, but it is not supported in the current environment.

Next let's draw a beautiful and complicated 3D graphic:
"""

"""Draw a beautiful and complicated 3D graphic.
"""
fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1,1,1, projection='3d')

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=plt.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi)
ax.set_ylim3d(0, 3*np.pi)
ax.set_zlim3d(-np.pi, 2*np.pi)

fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1,1,1, projection='3d')

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=plt.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=plt.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi)
ax.set_ylim3d(0, 3*np.pi)
ax.set_zlim3d(-np.pi, 2*np.pi)

"""## <a id = "3">3. Summary</a>

Through this course, I believe that you have mastered the methods and techniques for drawing with Matplotlib. These contents are sufficient for machine learning courses. Of course, if you are interested in Matplotlib, you can learn more about it through other courses in LabEx. 

The main points covered in this experiment are:

- The API compatible with MATLAB code style
- Diagram name, axis name and legend
- Line style, color and transparency
- Canvas grid and axis range
- Other 2D graphics
- 3D graphics

---

<div style="color: #999;font-size: 12px;font-style: italic;">*The content of this course is authorized by the author to be published in labex.io. Reproduction, downloading and illegal dissemination are prohibited without permission. Part of the experiment is compiled from: [Scientific Python Lectures by Robert Johansson](https://github.com/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb) .</div>
"""